Simplifying assumptions for pilot:
- limit 5 users, 5 rooms
- Any user can add or update room info.  No special "admin" account at this point.
- only self + one other user can be scheduled at a time
- rooms have one hour blocks of time to schedule into
- Invite notification will be a simple popup window with the user name, room, date and attendees.
- Acceptance or rejection of the invite will be in a similar popup

User Requirements:
Registered users must be able to login to system.
New users must be able to register for login.
Upon successful login, users must be able to:
- Add new rooms to the system.
- Update room availability (Open / closed times)
Search for and create invites:
- Display the grid of rooms along with available open time slots.
- Choose another user with whom to schedule an appointment into a room.
- Select the user / room / time and send an invite to that user for that meeting.
- View invites for a meeting when it is sent by another user.
- Accept or reject a received invitation to a meeting.
- View accept/reject messages for an invite sent by the user.

System requirements:
Login screen similar to Week10\Login will be created
Sample users are pre loaded via the "users" file
Second screen is the view of the rooms / availability.
Must have a way to choose a room / slot for proposed meeting.
Confirm choice to send to the other user.
Need design for the view screen.

Classes employed:

Room:
    /// Creates a Resource to schedule meetings
    /// Properties:
    /// Room Name
    /// Room Description or comments
    /// Login password (encrypted)
    /// Availability (Time / Date slots)
    /// Methods:
    /// Room.showAvail(date)
    /// Room.UpdateAvail(date)
    /// Room.showInfo

User:
    /// Creates a login user who can schedule and be invited to meetings
    /// Display room availability for each day on the web page.
    /// Properties:
    /// Name
    /// Login password (encrypted)
    /// Availability (Time / Date slots)
    /// Methods:
    /// User.Login
    /// User.RequestMeeting(Attendee, Resource, Time/Date)
    /// User.Accept(invnum)
    /// User.Reject(invnum)

TODO list:
Make the existing login procedure part of the user class method
- To request a meeting:
-- Display the list of users from the DB thru class user
    Need way to query from user table -> web control
-- Display the list of resources from the DB thru class room
    Need way to query from room table -> web control
-- User can choose a combination of an invitee and a room (web page logic)
-- App will display the availability matrix for that combination from the DB.
    Need way to query from roominfo table -> web list
-- User can create a request for a meeting given that combination.
    web list must have embedded controls to allow this choice.
-- Message with unique ID (invnum) created for the request.
   Message contains information about the invite. This is stored in DB, and sent to the invitee. 
    Logic to trigger the sub form containing this info.

To accept or reject the invite the invitee must be able to retrieve the information from invnum.
Ideally there would be a queue of invitations the users could search on at any time.
For the pilot we will simply throw up a popup choice displaying the info. Invitee can accept or decline invite.
Either choice will cause an update to the message and the result must be sent back to the original user.
If the invite is accepted we must update the room availability matrix accordingly.
The method to update room availability is built to either reserve or open a slot in the matrix.
Ideally there would be a way to cancel the meetings but I may not implement this fully in the pilot.



